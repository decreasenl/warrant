 @Output()
  readonly resize = fromEvent<MouseEvent>(
    this.target,
    'mousedown'
  ).pipe(
    switchMap(() => {
      return fromEvent<MouseEvent>(this.target, 'mouseup')
        .pipe(
          map(({clientX}) => 0 + clientX - 100),
          takeUntil(fromEvent(this.target, 'mouseup'))
        );
    })
  );


  


    

     var observable = new Observable(observed => {
       observed.next(
         this.el.nativeElement.addEventListener('mousedown', (($event: MouseEvent) => {
           dragging = true;
           console.log('dragging')
          
         }))
       )
     });
     ;

     this.el.nativeElement.addEventListener('mouseover', (($event: MouseEvent) => {
       console.log('moving')
        console.log($event);
       if (dragging) {
          $event.target.style. = $event.clientX;
          $event.target.style.width = $event.clientY
         const target = $event.target as HTMLElement;
         console.log(target);
         target.
         const { width, right } = target.getBoundingClientRect();

         target.client

         console.log(width, right)
       }
     }));

     this.el.nativeElement.addEventListener('mouseup', (($event: MouseEvent) => { 
       console.log('dropping')
        console.log($event);
     }));